---
description: USE form_processor.js for all form handling to ENSURE consistent form submission, validation, and error management
globs: **/*.js, **/*.html
alwaysApply: false
---

# Form Processor Guidelines

## Context

- When implementing forms in the application
- When handling form submissions and data processing
- When displaying loading states and submission feedback
- When validating user input and displaying error messages

## Requirements

- Use the FormProcessor utility for all form handling
- Follow a consistent pattern for form submission across the application
- Implement proper error handling and user feedback
- Use standard loading indicators during form processing
- Validate form inputs both client-side and server-side
- Handle success and error responses consistently

## Examples

<example>
<!-- Good: HTML Form with proper structure -->
<form id="toolForm">
    <div class="mb-3">
        <label for="inputText" class="form-label">Input Text</label>
        <textarea class="form-control" id="inputText" name="input_text" rows="6" required></textarea>
    </div>
    <div class="mb-3">
        <label for="option" class="form-label">Processing Option</label>
        <select class="form-select" id="option" name="option">
            <option value="default">Default</option>
            <option value="alternative">Alternative</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Process</button>
</form>

<!-- Good: Result container with proper structure -->
<div id="resultContainer" class="mt-4"></div>

<!-- Good: JavaScript using FormProcessor -->
<script type="module">
    import { FormProcessor } from '/static/js/form_processor.js';

    // Initialize form with FormProcessor
    FormProcessor.initializeForm({
        // Form element ID
        formId: 'toolForm',

        // API endpoint
        endpoint: '/api/v1/tools/process',

        // HTTP method
        method: 'POST',

        // Success handler
        processSuccessResponse: function(data, resultSection) {
            if (data.success) {
                // Display results
                const resultContainer = document.getElementById('resultContainer');
                resultContainer.innerHTML = `
                    <div class="card bg-dark">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Results</h5>
                        </div>
                        <div class="card-body">
                            <pre>${JSON.stringify(data.result, null, 2)}</pre>
                        </div>
                    </div>
                `;
            } else {
                // Handle API "success" response that contains an error
                throw new Error(data.error || 'Unknown error occurred');
            }
        },
        
        // Custom error handler (optional)
        processErrorResponse: function(error, resultSection) {
            // Display error message
            resultSection.innerHTML = `
                <div class="alert alert-danger">
                    <strong>Error:</strong> ${error.message || 'An unexpected error occurred'}
                </div>
            `;
        },
        
        // Pre-submission validation (optional)
        validateForm: function(formData) {
            const inputText = formData.get('input_text');
            if (!inputText || inputText.trim().length < 5) {
                throw new Error('Input text must be at least 5 characters long');
            }
            return true;
        }
    });
</script>
</example>

<example type="invalid">
<!-- Bad: Form with manual handling -->
<form id="manualForm">
    <div class="form-group">
        <label for="inputData">Input Data</label>
        <input type="text" id="inputData" name="input_data">
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<div id="result"></div>
<div id="error" class="text-danger"></div>
<div id="loading" style="display:none;">Processing...</div>

<!-- Bad: Manual form handling without FormProcessor -->
<script>
    document.getElementById('manualForm').addEventListener('submit', function(e) {
        e.preventDefault();

        // Manual loading state
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').textContent = '';
        document.getElementById('result').innerHTML = '';

        // Manual form data extraction
        const inputData = document.getElementById('inputData').value;

        // Manual validation
        if (!inputData) {
            document.getElementById('error').textContent = 'Input is required';
            document.getElementById('loading').style.display = 'none';
            return;
        }

        // Manual fetch request
        fetch('/api/v1/process', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ input_data: inputData })
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('loading').style.display = 'none';

            if (data.success) {
                document.getElementById('result').innerHTML =
                    '<pre>' + JSON.stringify(data.result, null, 2) + '</pre>';
            } else {
                document.getElementById('error').textContent = data.error || 'Unknown error';
            }
        })
        .catch(error => {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').textContent = error.message || 'Request failed';
        });
    });
</script>
</example>

## Form Processor Configuration

### Basic Configuration

```javascript
import { FormProcessor } from '/static/js/form_processor.js';

FormProcessor.initializeForm({
    formId: 'formId',            // ID of the form element
    endpoint: '/api/endpoint',   // API endpoint to submit to
    method: 'POST',              // HTTP method (POST, PUT, etc.)
    
    // Function to process successful response
    processSuccessResponse: function(data, resultSection) {
        if (data.success) {
            resultSection.innerHTML = `<pre>${JSON.stringify(data.result, null, 2)}</pre>`;
        } else {
            throw new Error(data.error || 'Unknown error occurred');
        }
    }
});
```

### Advanced Configuration

```javascript
FormProcessor.initializeForm({
    formId: 'formId',
    endpoint: '/api/endpoint',
    method: 'POST',
    
    // Custom headers
    headers: {
        'X-Custom-Header': 'custom-value'
    },
    
    // Transform form data before submission
    transformFormData: function(formData) {
        // Convert specific fields or add computed values
        const transformed = new FormData();
        transformed.append('transformed_field', formData.get('original_field').toUpperCase());
        return transformed;
    },
    
    // Validate before submission
    validateForm: function(formData) {
        const value = formData.get('field');
        if (!value || value.length < 3) {
            throw new Error('Field must be at least 3 characters');
        }
        return true;
    },
    
    // Custom processing of successful response
    processSuccessResponse: function(data, resultSection) {
        // Handle successful response
    },
    
    // Custom processing of error response
    processErrorResponse: function(error, resultSection) {
        resultSection.innerHTML = `
            <div class="alert alert-danger">
                <strong>Error:</strong> ${error.message}
            </div>
        `;
    }
});
```

## Critical Rules

- Use FormProcessor for all form handling in the application
- Always provide clear user feedback during form submission
- Validate form inputs before sending to the server
- Use consistent error handling and display patterns
- Follow the template structure in the tool_base.html for all tool forms
- Include appropriate loading states during form processing
- Use semantic form elements with proper labels and validation attributes
- Structure results with appropriate Bootstrap styling (cards, alerts, etc.)
- Use pre-tags for formatting code or structured data in results
