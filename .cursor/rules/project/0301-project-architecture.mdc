---
description: This is the architecture layer of the project, Grant Manager app.
globs: **/*
alwaysApply: true
---
# Architecture for Grant Manager

## Status: Approved

## Technical Summary

The Grant Manager is a specialized tracking system designed to manage grant opportunities, programs, and cycles for organizations. Built on the Python FastAPI stack, it provides a centralized platform for monitoring grant deadlines, statuses, and financial outcomes while automating the creation of recurring grant cycles based on program frequencies.

The system follows a structured data model representing Organizations, Grant Programs, Grant Cycles, and Proposals, with comprehensive date tracking and verification statuses for each key milestone in the grant process.

## Technology Table

| Technology | Description |
|---|----|
| FastAPI | Backend web framework providing both API and web interfaces |
| SQLModel | SQLAlchemy-based ORM for database operations |
| SQLite3 | Local database storage |
| Alembic | Database migration management |
| Jinja2 | HTML templating engine |
| Bootstrap | Frontend CSS framework |
| JavaScript | Client-side interactivity |
| Poetry | Dependency management |

## Architectural Diagrams

### Component Architecture

```mermaid
graph TD
    User[User] --> WebInterface[Web Interface]
    User --> APIEndpoints[API Endpoints]
    
    WebInterface --> Routes[Routes]
    APIEndpoints --> Routes
    
    Routes --> CRUD[CRUD Operations]
    Routes --> Services[Services]
    
    CRUD --> Models[SQLModel Models]
    Models --> Database[(SQLite Database)]
    
    Services --> Calendar[Calendar Integration]
    
    subgraph Application
        WebInterface
        APIEndpoints
        Routes
        CRUD
        Models
        Services
    end
    
    style User fill:#f9f,stroke:#333
    style Application fill:#eef,stroke:#333,stroke-dasharray: 5 5
    style Database fill:#bbf,stroke:#333
    style Calendar fill:#fbb,stroke:#333
```

### Grant Lifecycle Flow

```mermaid
sequenceDiagram
    participant User
    participant App as Grant Manager
    participant OrgDB as Organizations
    participant ProgDB as Programs
    participant CycleDB as Cycles
    
    User->>App: Create Organization
    App->>OrgDB: Store Organization
    
    User->>App: Create Grant Program
    App->>ProgDB: Store Program
    
    alt Recurring Program
        App->>CycleDB: Auto-generate Cycles
    else One-time Program
        App->>CycleDB: Create Single Cycle
    end
    
    User->>App: Track Cycle Dates
    App->>CycleDB: Update Verification Status
    
    User->>App: Update Award Amounts
    App->>CycleDB: Store Financial Data
    
    User->>App: View Calendar
    App->>CycleDB: Query Upcoming Deadlines
    App->>User: Display Timeline
```

## Data Models

### Core Entities

#### Organization

Represents an entity that offers grants or funding:

- Basic Information:
  - Name
  - Type (Non-Profit, For-Profit, Government, Other)
  - Description
  - Contact details
  - Website URLs
- Status:
  - Active/Inactive flag
  - Creation date
  - Last updated date
- Relationships:
  - Programs (one-to-many)

#### Grant Program

Represents a structured funding initiative offered by an organization:

- Basic Information:
  - Name
  - Description
  - Frequency (One-time, Monthly, Quarterly, Yearly)
  - Focus areas
  - Eligibility criteria
- Status:
  - Active/Inactive flag
  - Creation date
  - Last updated date
- Relationships:
  - Organization (many-to-one)
  - Cycles (one-to-many)

#### Grant Cycle

Represents a specific instance of a grant program with defined timeframes:

- Key Dates:
  - Letter of Intent open date
  - Letter of Intent due date
  - Application open date
  - Application due date
  - Decision date
  - Payout date(s)
- Verification Status:
  - Status flags for each key date
  - Completion status
- Financial Information:
  - Requested amount
  - Awarded amount
  - Received amount
- Status:
  - Current status (Planning, Open, Under Review, Decided, Completed)
  - Creation date
  - Last updated date
- Relationships:
  - Program (many-to-one)
  - Proposals (one-to-many)

#### Grant Proposal

Represents a formal application submitted during a grant cycle:

- Basic Information:
  - Title
  - Project details
  - Requested amount
- Status:
  - Submission status
  - Decision status
  - Verification status
- Financial Information:
  - Requested amount
  - Awarded amount
  - Payment schedule
- Relationships:
  - Cycle (many-to-one)

## Project Structure

The Grant Manager follows the python-fastapi-stack project structure with specific adaptations for grant management:

```
app/
├── core/              # Core application components
├── api/               # API endpoints for grant management
│   └── v1/
│       └── endpoints/
│           ├── organizations.py
│           ├── programs.py
│           ├── cycles.py
│           └── proposals.py
├── crud/              # Database CRUD operations
│   ├── organization.py
│   ├── program.py
│   ├── cycle.py
│   └── proposal.py
├── models/            # SQLModel database models
│   ├── organization.py
│   ├── program.py
│   ├── cycle.py
│   └── proposal.py
├── services/          # Business services
│   ├── calendar.py    # Calendar integration
│   └── cycle_gen.py   # Cycle generation service
├── views/             # Web view handlers and templates
│   ├── pages/
│   │   ├── dashboard/
│   │   ├── organizations/
│   │   ├── programs/
│   │   └── cycles/
│   └── templates/
│       ├── dashboard/
│       ├── organizations/
│       ├── programs/
│       └── cycles/
└── static/            # Static assets
    ├── css/
    ├── js/
    │   ├── components/
    │   │   ├── calendar.js
    │   │   ├── date-picker.js
    │   │   └── status-tracker.js
    │   └── pages/
    │       ├── organizations.js
    │       ├── programs.js
    │       └── cycles.js
    └── img/
```

## Key Features Implementation

### 1. Automatic Cycle Generation

The system automatically generates grant cycles based on program frequency:

- Service: `cycle_gen.py` handles the logic for creating cycles based on program settings
- Trigger Points:
  - On program creation
  - When frequency settings are updated
  - Via manual trigger for ad-hoc generation

### 2. Date Verification System

Each key date in a grant cycle has a verification status to track completion:

- Statuses: Pending, Verified, Missed, Not Applicable
- User can manually mark dates as verified
- System tracks overdue dates automatically
- Dashboard highlights upcoming and overdue items

### 3. Calendar Integration

The calendar view provides a visual representation of all key dates:

- Monthly/Weekly/Daily views
- Color-coded by status (upcoming, overdue, verified)
- Filterable by organization and program
- Export functionality for external calendar applications

### 4. Financial Tracking

The system tracks financial aspects of grant cycles:

- Requested vs. awarded amounts
- Payment schedules and received amounts
- Aggregate reporting by organization and program
- Historical performance metrics

## Additional Contexts

This architecture builds upon the Python FastAPI Stack foundation, adapting it specifically for grant management needs with specialized data models, automated workflows, and tracking capabilities.
